{"version":3,"sources":["components/Commons/FormsControl.jsx","utilits/validator.js","components/Signin/Signin.jsx","redux/authReducer.js","redux/types/types.js","components/Signin/Styles.js","components/Signin/SigninContainer.jsx","components/Signin/Copyright/Copyright.jsx","components/Signout/Signout.jsx","App.js","serviceWorker.js","redux/sagas/isAuthSaga.js","redux/sagas/loginSaga.js","redux/sagas/logoutSaga.js","redux/store.js","index.js"],"names":["BlueCheckbox","withStyles","root","color","checked","props","Checkbox","Input","input","meta","TextField","error","touched","InputCheckbox","FormControlLabel","control","value","label","required","reduxForm","form","onSubmit","handleSubmit","className","classes","noValidate","Field","variant","margin","fullWidth","name","component","id","autoComplete","validate","type","Button","submit","Grid","container","item","xs","Link","href","initialState","token","localStorage","getItem","isAuth","loginSucces","authReducer","state","action","setItem","jwt","removeItem","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","backgroundColor","width","borderColor","borderWidth","background","connect","auth","login","to","Avatar","Typography","Signin","Copyright","align","Date","getFullYear","logout","Box","mt","onClick","e","preventDefault","onLogout","checkIsAuth","useEffect","Container","maxWidth","CssBaseline","exact","path","render","Boolean","window","location","hostname","match","watchIsAuth","workerIsAuth","takeEvery","put","workerLogin","watchLogin","serverRequest","call","workerLogout","watchLogout","reducers","combineReducers","formReducer","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ffb1eb5d.chunk.js","sourcesContent":["import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst BlueCheckbox = withStyles({\r\n    root: {\r\n      '&$checked': {\r\n        color: '#2196F3',\r\n      },\r\n    },\r\n    checked: {},\r\n  })(props => <Checkbox color=\"default\" {...props} />);\r\n\r\n\r\nexport const Input = ({ input, meta, ...props }) => {\r\n    return <TextField {...input} {...props} error = {meta.touched && meta.error && true} />\r\n}\r\n\r\nexport const InputCheckbox = ({ input, meta, ...props }) => {\r\n    return <FormControlLabel control={<BlueCheckbox {...input} {...props} value=\"remember\" />} label=\"Запомнить меня\" />\r\n}\r\n\r\n\r\n\r\n\r\n","export const required = (value) => {\r\n    if (value) {return undefined};\r\n    return 'Field is required'\r\n}","import React from 'react';\r\nimport { Input, InputCheckbox } from '../Commons/FormsControl';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport { required } from '../../utilits/validator';\r\nimport Button from '@material-ui/core/Button';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n\r\nconst SigninForm = (props) => {\r\n    \r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={props.classes.form} noValidate>\r\n\r\n            <Field variant=\"outlined\" margin=\"normal\" fullWidth name={'email'} component={Input} id=\"email\"\r\n             label=\"Почта*\" autoComplete=\"email\" validate={required} />\r\n            \r\n            <Field variant=\"outlined\" margin=\"normal\" type={'password'} fullWidth name={'password'}\r\n                component={Input} label=\"Пароль*\" id=\"password\" autoComplete=\"current-password\" validate={required}/>\r\n\r\n            <Field  component={InputCheckbox} name= {'rememberMe'} />\r\n            <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                className={props.classes.submit}\r\n            >\r\n                Войти в аккаунт\r\n            </Button>\r\n            <Grid container>\r\n                <Grid item xs>\r\n                    <Link href=\"#\" variant=\"body2\">\r\n                        Забыли пароль?\r\n                            </Link>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Link href=\"#\" variant=\"body2\">\r\n                        {\"Еще нет аккаунта? Регистрация\"}\r\n                    </Link>\r\n                </Grid>\r\n            </Grid>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm({ form: 'signin' })(SigninForm);","import {\r\n        LOGIN_SUCCES, \r\n        LOGOUT_SUCCES,\r\n        LOGIN,\r\n        LOGOUT,\r\n        CHECK_IS_AUTH,\r\n        SET_IS_AUTH} from './types/types';\r\n        \r\n   \r\n\r\nconst initialState = {\r\n    token: localStorage.getItem('token'),\r\n    isAuth: false,\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        \r\n        case LOGIN_SUCCES:\r\n           localStorage.setItem('token', action.token.jwt);\r\n            return {\r\n                ...state,\r\n                isAuth: true,\r\n                token: action.token.jwt\r\n            }\r\n        case LOGOUT_SUCCES:\r\n            localStorage.removeItem('token');\r\n            return {\r\n                ...state,\r\n                token: null,\r\n                isAuth: false,\r\n            }\r\n        case SET_IS_AUTH:\r\n            return {\r\n                ...state,\r\n                isAuth: state.token === '86fasfgfsogHGad' ? true : false\r\n            }\r\n    \r\n        default:\r\n            return {\r\n                ...state\r\n            }\r\n    }\r\n};\r\n\r\nexport const login = () => ({type:LOGIN});\r\nexport const logout = () => ({type:LOGOUT});\r\nexport const logoutSucces = () => ({type: LOGOUT_SUCCES});\r\nexport const loginSucces = (token) => ({type: LOGIN_SUCCES, token});\r\nexport const setIsAuth = () => ({type: SET_IS_AUTH});\r\nexport const checkIsAuth = () => ({type: CHECK_IS_AUTH});\r\n\r\n\r\nexport default authReducer;","export const LOGIN_SUCCES = 'LOGIN_SUCCES',\r\n             LOGOUT_SUCCES = 'LOGOUT_SUCCES',\r\n             LOGIN = 'LOGIN',\r\n             LOGOUT = 'LOGOUT',\r\n             CHECK_IS_AUTH = 'CHECK_IS_AUTH',\r\n             SET_IS_AUTH = 'SET_IS_AUTH';","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n        marginTop: theme.spacing(25),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        '& a': {\r\n            color: '#2196F3',\r\n        },\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: '#E10050',\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(1),\r\n        '& label.Mui-focused': {\r\n            color: '#2196F3',\r\n        },\r\n        '& label.Mui-error': {\r\n            color: '#E10050',\r\n        },\r\n        '& .MuiOutlinedInput-root': {\r\n            '&.Mui-focused fieldset': {\r\n                borderColor: '#2196F3',\r\n            },\r\n            '&.Mui-error fieldset': {\r\n                borderColor: '#E10050',\r\n                borderWidth: 2,\r\n            },\r\n        },\r\n        '& .Mui-error': {\r\n            '&.Mui-focused fieldset': {\r\n                borderColor: '#E10050 !important',\r\n            },\r\n        },\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n        backgroundColor: '#2196F3',\r\n        color: '#fff',\r\n        '&:hover': {\r\n            background: '#2F80ED',\r\n        },\r\n    }\r\n}));\r\n\r\nexport default useStyles;","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Signin from './Signin';\r\nimport { connect } from 'react-redux';\r\nimport { login } from '../../redux/authReducer';\r\nimport { Redirect } from 'react-router-dom';\r\nimport useStyles from './Styles';\r\n\r\n\r\nconst SigninContainer = (props) => {\r\n    const classes = useStyles();\r\n\r\n    const onSubmit = () => {\r\n        props.login();\r\n    }\r\n\r\n    if (props.isAuth) return <Redirect to={'/signout'} />;\r\n\r\n    return (\r\n        <div className={classes.paper}>\r\n            <Avatar className={classes.avatar}>\r\n                <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n                Вход в аккаунт\r\n            </Typography>\r\n\r\n            <Signin onSubmit={onSubmit} classes={classes} />\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nexport default connect(mapStateToProps, { login })(SigninContainer);","import React from 'react';\r\nimport Link from '@material-ui/core/Link';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst Copyright = () => {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {'Copyright © '}\r\n            <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n                Ваш сайт\r\n            </Link>{' '}\r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nexport default Copyright;","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport {logout} from '../../redux/authReducer';\r\n\r\nconst Signout = (props) => {\r\n    const onLogout = (e) => {\r\n        e.preventDefault();\r\n        props.logout();\r\n    }\r\n    if (!props.isAuth) return <Redirect to = {'/'} />;\r\n\r\n    return <Box component=\"div\" align=\"center\" mt = {35} >\r\n                <Button onClick = {(e) => onLogout(e)} fullWidth variant=\"contained\" color=\"secondary\">\r\n                     Signout\r\n                </Button>\r\n            </Box>\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nexport default connect (mapStateToProps, {logout}) (Signout);","import React, { useEffect } from 'react';\nimport Container from '@material-ui/core/Container';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Signin from './components/Signin/SigninContainer';\nimport Box from '@material-ui/core/Box';\nimport Copyright from './components/Signin/Copyright/Copyright';\nimport { Route } from 'react-router-dom';\nimport Signout from './components/Signout/Signout';\nimport { connect } from 'react-redux';\nimport {checkIsAuth} from './redux/authReducer';\n\nconst App = ({checkIsAuth}) => {\n\nuseEffect(() => {\n  checkIsAuth();\n}, [checkIsAuth]);\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline />\n            <Route exact path = \"/\" render = {()=> <Signin />} />\n            <Route path = \"/signout\" render = {()=> <Signout  />} />\n            <Box mt={8}>\n                <Copyright />\n            </Box>\n    </Container>\n  );\n}\n\nexport default connect (null, {checkIsAuth})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {takeEvery, put} from 'redux-saga/effects';\r\nimport {CHECK_IS_AUTH} from '../types/types';\r\nimport {setIsAuth} from '../authReducer';\r\n\r\nexport function* watchIsAuth () {\r\n    yield takeEvery(CHECK_IS_AUTH, workerIsAuth)\r\n}\r\n\r\nfunction* workerIsAuth () {\r\n    yield put(setIsAuth())\r\n}","import {takeEvery, put, call} from 'redux-saga/effects';\r\nimport {LOGIN} from '../types/types';\r\nimport {loginSucces} from '../authReducer';\r\n\r\nconst serverRequest = () => {\r\n    return {jwt: '86fasfgfsogHGad'}\r\n}\r\n\r\n\r\nfunction* workerLogin () {\r\n    const token = yield call(serverRequest);\r\n    yield put(loginSucces(token))\r\n}\r\n\r\nexport function* watchLogin () {\r\n    yield takeEvery(LOGIN, workerLogin)\r\n}","import {takeEvery, put} from 'redux-saga/effects';\r\nimport {LOGOUT} from '../types/types';\r\nimport {logoutSucces} from '../authReducer';\r\n\r\nfunction* workerLogout () {\r\n    yield put(logoutSucces())\r\n}\r\n\r\nexport function* watchLogout () {\r\n    yield takeEvery(LOGOUT, workerLogout)\r\n}","import {createStore, combineReducers, applyMiddleware} from 'redux';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport authReducer from './authReducer';\r\nimport { watchIsAuth } from './sagas/isAuthSaga';\r\nimport { watchLogin } from './sagas/loginSaga';\r\nimport { watchLogout } from './sagas/logoutSaga';\r\n\r\nconst reducers = combineReducers({\r\n    auth: authReducer,\r\n    form: formReducer\r\n});\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst store = createStore(reducers, applyMiddleware(sagaMiddleware));\r\nsagaMiddleware.run(watchIsAuth);\r\nsagaMiddleware.run(watchLogin);\r\nsagaMiddleware.run(watchLogout);\r\nwindow.store = store;\r\n\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\nimport { HashRouter } from 'react-router-dom';\nimport {Provider} from 'react-redux';\n\n    ReactDOM.render(\n        <HashRouter>\n            <Provider store = {store}>\n                <App />\n            </Provider>\n        </HashRouter>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}